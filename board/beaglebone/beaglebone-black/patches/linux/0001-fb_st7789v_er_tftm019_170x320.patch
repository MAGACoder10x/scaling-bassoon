Index: linux-custom/drivers/staging/fbtft/fb_st7789v.c
===================================================================
--- linux-custom.orig/drivers/staging/fbtft/fb_st7789v.c
+++ linux-custom/drivers/staging/fbtft/fb_st7789v.c
@@ -66,6 +66,22 @@ enum st7789v_command {
 #define MADCTL_MX BIT(6) /* bitmask for column address order */
 #define MADCTL_MY BIT(7) /* bitmask for page address order */
 
+static u32 col_offset = 0;
+static u32 row_offset = 0;
+static u8 col_hack_fix_offset = 0;
+static short x_offset = 0;
+static short y_offset = 0;
+
+static void reset(struct fbtft_par* par) 
+{
+	//reset sequence for ER
+	gpiod_set_value(par->gpio.reset, 1);
+	mdelay(10);;
+	gpiod_set_value(par->gpio.reset, 0);
+	mdelay(10);
+	gpiod_set_value(par->gpio.reset, 1);
+}
+
 /**
  * init_display() - initialize the display controller
  *
@@ -82,7 +98,8 @@ enum st7789v_command {
  */
 static int init_display(struct fbtft_par *par)
 {
-	par->fbtftops.reset(par);
+	/*reset the display*/
+	reset(par);
 
 	/* turn off sleep mode */
 	write_reg(par, MIPI_DCS_EXIT_SLEEP_MODE);
@@ -147,6 +164,62 @@ static int init_display(struct fbtft_par
 	return 0;
 }
 
+static void minipitft13_set_addr_win(struct fbtft_par *par, int xs, int ys,
+				     int xe, int ye)
+{
+	xs += x_offset;
+	xe += x_offset;
+	ys += y_offset;
+	ye += y_offset;
+	write_reg(par, MIPI_DCS_SET_COLUMN_ADDRESS,
+		  xs >> 8, xs & 0xFF, xe >> 8, xe & 0xFF);
+
+	write_reg(par, MIPI_DCS_SET_PAGE_ADDRESS,
+		  ys >> 8, ys & 0xFF, ye >> 8, ye & 0xFF);
+
+	write_reg(par, MIPI_DCS_WRITE_MEMORY_START);
+}
+
+#define TFT_WIDTH 170
+#define TFT_HEIGHT 320
+
+static void er_set_addr_win(struct fbtft_par *par, int xs, int ys,
+				     int xe, int ye)
+{
+	switch (par->info->var.rotate) {
+	case 0:
+		//set the column address 0x2A
+		write_reg(par, MIPI_DCS_SET_COLUMN_ADDRESS, 0, 35, (TFT_WIDTH-1) >> 8, TFT_WIDTH+34);
+		//set the row address 0x2B
+		write_reg(par, MIPI_DCS_SET_PAGE_ADDRESS, 0, 0, ((TFT_HEIGHT-1) >> 8)& 0xFF, ((TFT_HEIGHT-1)& 0xFF));		
+		break;
+	case 90:
+		//set the column address 0x2A
+		write_reg(par, MIPI_DCS_SET_COLUMN_ADDRESS, 0, 0, (TFT_HEIGHT-1) >> 8, TFT_HEIGHT);
+		//set the row address 0x2B
+		write_reg(par, MIPI_DCS_SET_PAGE_ADDRESS, 0, 35, ((TFT_WIDTH-1) >> 8)& 0xFF, ((TFT_WIDTH+34)& 0xFF));			
+		break;
+	case 180:
+		//set the column address 0x2A
+		write_reg(par, MIPI_DCS_SET_COLUMN_ADDRESS, 0, 35, (TFT_WIDTH-1) >> 8, TFT_WIDTH+34);
+		//set the row address 0x2B
+		write_reg(par, MIPI_DCS_SET_PAGE_ADDRESS, 0, 0, ((TFT_HEIGHT-1) >> 8)& 0xFF, ((TFT_HEIGHT-1)& 0xFF));			
+		break;		
+	case 270:
+		//set the column address 0x2A
+		write_reg(par, MIPI_DCS_SET_COLUMN_ADDRESS, 0, 0, (TFT_HEIGHT-1) >> 8, TFT_HEIGHT);
+		//set the row address 0x2B
+		write_reg(par, MIPI_DCS_SET_PAGE_ADDRESS, 0, 35, ((TFT_WIDTH-1) >> 8)& 0xFF, ((TFT_WIDTH+34)& 0xFF));			
+		break;
+	default:
+		par->info->var.rotate = 90;
+	};
+
+
+
+	write_reg(par, MIPI_DCS_WRITE_MEMORY_START);
+}
+
 /**
  * set_var() - apply LCD properties like rotation and BGR mode
  *
@@ -157,20 +230,32 @@ static int init_display(struct fbtft_par
 static int set_var(struct fbtft_par *par)
 {
 	u8 madctl_par = 0;
+	struct fbtft_display *display = &par->pdata->display;
+	u32 width = display->width;
+	u32 height = display->height;
 
 	if (par->bgr)
 		madctl_par |= MADCTL_BGR;
 	switch (par->info->var.rotate) {
 	case 0:
+		x_offset = 0;
+		y_offset = 0;
 		break;
 	case 90:
 		madctl_par |= (MADCTL_MV | MADCTL_MY);
+		x_offset = (320 - height) - row_offset;
+		y_offset = (240 - width) - col_offset;
 		break;
 	case 180:
 		madctl_par |= (MADCTL_MX | MADCTL_MY);
+		x_offset = (240 - width) - col_offset + col_hack_fix_offset;
+		// hack tweak to account for extra pixel width to make even
+		y_offset = (320 - height) - row_offset;
 		break;
 	case 270:
 		madctl_par |= (MADCTL_MV | MADCTL_MX);
+		x_offset = row_offset;
+		y_offset = col_offset;
 		break;
 	default:
 		return -EINVAL;
@@ -252,9 +337,11 @@ static int blank(struct fbtft_par *par,
 	return 0;
 }
 
+
+
 static struct fbtft_display display = {
 	.regwidth = 8,
-	.width = 240,
+	.width = 170,
 	.height = 320,
 	.gamma_num = 2,
 	.gamma_len = 14,
@@ -264,10 +351,21 @@ static struct fbtft_display display = {
 		.set_var = set_var,
 		.set_gamma = set_gamma,
 		.blank = blank,
+		.reset = reset,
+		.set_addr_win = er_set_addr_win,
 	},
 };
 
-FBTFT_REGISTER_DRIVER(DRVNAME, "sitronix,st7789v", &display);
+int variant_minipitft13(struct fbtft_display *display)
+{
+	display->fbtftops.set_addr_win = minipitft13_set_addr_win;
+	return 0;
+}
+
+FBTFT_REGISTER_DRIVER_START(&display)
+FBTFT_COMPATIBLE("sitronix,st7789v")
+FBTFT_VARIANT_COMPATIBLE("fbtft,minipitft13", variant_minipitft13)
+FBTFT_REGISTER_DRIVER_END(DRVNAME, &display);
 
 MODULE_ALIAS("spi:" DRVNAME);
 MODULE_ALIAS("platform:" DRVNAME);
Index: linux-custom/drivers/staging/fbtft/fbtft-core.c
===================================================================
--- linux-custom.orig/drivers/staging/fbtft/fbtft-core.c
+++ linux-custom/drivers/staging/fbtft/fbtft-core.c
@@ -24,6 +24,8 @@
 #include <linux/platform_device.h>
 #include <linux/property.h>
 #include <linux/spinlock.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
 
 #include <video/mipi_display.h>
 
@@ -1187,6 +1189,7 @@ static struct fbtft_platform_data *fbtft
  * @display: Display properties
  * @sdev: SPI device
  * @pdev: Platform device
+ * @dt_ids: Compatible string table
  *
  * Allocates, initializes and registers a framebuffer
  *
@@ -1196,12 +1199,15 @@ static struct fbtft_platform_data *fbtft
  */
 int fbtft_probe_common(struct fbtft_display *display,
 		       struct spi_device *sdev,
-		       struct platform_device *pdev)
+		       struct platform_device *pdev,
+		       const struct of_device_id *dt_ids)
 {
 	struct device *dev;
 	struct fb_info *info;
 	struct fbtft_par *par;
 	struct fbtft_platform_data *pdata;
+	const struct of_device_id *match;
+	int (*variant)(struct fbtft_display *);
 	int ret;
 
 	if (sdev)
@@ -1217,6 +1223,14 @@ int fbtft_probe_common(struct fbtft_disp
 		pdata = fbtft_properties_read(dev);
 		if (IS_ERR(pdata))
 			return PTR_ERR(pdata);
+		match = of_match_device(dt_ids, dev);
+		if (match && match->data) {
+			/* apply the variant */
+			variant = match->data;
+			ret = (*variant)(display);
+			if (ret)
+				return ret;
+		}
 	}
 
 	info = fbtft_framebuffer_alloc(display, dev, pdata);
Index: linux-custom/drivers/staging/fbtft/fbtft.h
===================================================================
--- linux-custom.orig/drivers/staging/fbtft/fbtft.h
+++ linux-custom/drivers/staging/fbtft/fbtft.h
@@ -251,7 +251,8 @@ void fbtft_register_backlight(struct fbt
 void fbtft_unregister_backlight(struct fbtft_par *par);
 int fbtft_init_display(struct fbtft_par *par);
 int fbtft_probe_common(struct fbtft_display *display, struct spi_device *sdev,
-		       struct platform_device *pdev);
+		       struct platform_device *pdev,
+		       const struct of_device_id *dt_ids);
 int fbtft_remove_common(struct device *dev, struct fb_info *info);
 
 /* fbtft-io.c */
@@ -272,11 +273,13 @@ void fbtft_write_reg8_bus9(struct fbtft_
 void fbtft_write_reg16_bus8(struct fbtft_par *par, int len, ...);
 void fbtft_write_reg16_bus16(struct fbtft_par *par, int len, ...);
 
-#define FBTFT_REGISTER_DRIVER(_name, _compatible, _display)                \
+#define FBTFT_REGISTER_DRIVER_START(_display)                              \
+									   \
+static const struct of_device_id dt_ids[];                                 \
 									   \
 static int fbtft_driver_probe_spi(struct spi_device *spi)                  \
 {                                                                          \
-	return fbtft_probe_common(_display, spi, NULL);                    \
+	return fbtft_probe_common(_display, spi, NULL, dt_ids);	           \
 }                                                                          \
 									   \
 static int fbtft_driver_remove_spi(struct spi_device *spi)                 \
@@ -288,7 +291,7 @@ static int fbtft_driver_remove_spi(struc
 									   \
 static int fbtft_driver_probe_pdev(struct platform_device *pdev)           \
 {                                                                          \
-	return fbtft_probe_common(_display, NULL, pdev);                   \
+	return fbtft_probe_common(_display, NULL, pdev, dt_ids);           \
 }                                                                          \
 									   \
 static int fbtft_driver_remove_pdev(struct platform_device *pdev)          \
@@ -298,8 +301,16 @@ static int fbtft_driver_remove_pdev(stru
 	return fbtft_remove_common(&pdev->dev, info);                      \
 }                                                                          \
 									   \
-static const struct of_device_id dt_ids[] = {                              \
-	{ .compatible = _compatible },                                     \
+static const struct of_device_id dt_ids[] = {
+
+#define FBTFT_COMPATIBLE(_compatible)                                      \
+	{ .compatible = _compatible },
+
+#define FBTFT_VARIANT_COMPATIBLE(_compatible, _variant)                    \
+	{ .compatible = _compatible, .data = _variant },
+
+#define FBTFT_REGISTER_DRIVER_END(_name, _display)                         \
+									   \
 	{},                                                                \
 };                                                                         \
 									   \
@@ -332,10 +343,7 @@ static int __init fbtft_driver_module_in
 	ret = spi_register_driver(&fbtft_driver_spi_driver);               \
 	if (ret < 0)                                                       \
 		return ret;                                                \
-	ret = platform_driver_register(&fbtft_driver_platform_driver);     \
-	if (ret < 0)                                                       \
-		spi_unregister_driver(&fbtft_driver_spi_driver);           \
-	return ret;                                                        \
+	return platform_driver_register(&fbtft_driver_platform_driver);    \
 }                                                                          \
 									   \
 static void __exit fbtft_driver_module_exit(void)                          \
@@ -347,6 +355,11 @@ static void __exit fbtft_driver_module_e
 module_init(fbtft_driver_module_init);                                     \
 module_exit(fbtft_driver_module_exit);
 
+#define FBTFT_REGISTER_DRIVER(_name, _compatible, _display)                \
+	FBTFT_REGISTER_DRIVER_START(_display)                              \
+	FBTFT_COMPATIBLE(_compatible)                                      \
+	FBTFT_REGISTER_DRIVER_END(_name, _display)
+
 /* Debug macros */
 
 /* shorthand debug levels */
